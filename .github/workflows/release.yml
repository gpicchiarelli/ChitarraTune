name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g. 1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: macos-14
    env:
      MACOS_CERT_P12: ${{ secrets.MACOS_CERT_P12 }}
      MACOS_CERT_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
      CODESIGN_IDENTITY: ${{ secrets.CODESIGN_IDENTITY }}
      MACOS_TEAM_ID: ${{ secrets.MACOS_TEAM_ID }}
      NOTARY_API_KEY_ID: ${{ secrets.NOTARY_API_KEY_ID }}
      NOTARY_API_ISSUER_ID: ${{ secrets.NOTARY_API_ISSUER_ID }}
      NOTARY_API_KEY_P8: ${{ secrets.NOTARY_API_KEY_P8 }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Xcode 15
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.x'

      # Generate BuildInfo used by About panel; driven by the tag
      - name: Generate VersionInfo.swift from Git
        env:
          INPUT_VERSION: ${{ inputs.version }}
        run: |
          set -euo pipefail
          OUT="Apps/Shared/Generated/VersionInfo.swift"
          mkdir -p "$(dirname "$OUT")"
          TAG_REF="${GITHUB_REF_NAME:-}"
          if [ -z "${TAG_REF}" ] && [ -n "${INPUT_VERSION:-}" ]; then TAG_REF="v${INPUT_VERSION}"; fi
          TAG="${TAG_REF}"
          SHA="$(git rev-parse --short HEAD 2>/dev/null || echo)"
          DESC="$(git describe --tags --dirty --always 2>/dev/null || git rev-parse --short HEAD 2>/dev/null || echo)"
          DATE="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          cat > "$OUT" <<EOF
          import Foundation
          public enum BuildInfo {
              public static let gitTag: String = "${TAG}"
              public static let gitCommit: String = "${SHA}"
              public static let gitDescribe: String = "${DESC}"
              public static let buildDate: String = "${DATE}"
          }
          EOF

      # Gate packaging on tests success
      - name: Resolve Swift Packages
        run: xcodebuild -resolvePackageDependencies -project ChitarraTune.xcodeproj
      - name: SwiftPM tests
        run: |
          set -euo pipefail
          swift test --parallel --configuration release
      - name: UI Tests (Xcode)
        run: |
          set -euo pipefail
          xcodebuild -project ChitarraTune.xcodeproj -scheme "ChitarraTune" -destination 'platform=macOS' CODE_SIGNING_ALLOWED=NO test

      - name: Build Release
        id: build
        env:
          INPUT_VERSION: ${{ inputs.version }}
        run: |
          set -euo pipefail
          xcodebuild -project ChitarraTune.xcodeproj -scheme "ChitarraTune" -configuration Release -derivedDataPath build -destination 'platform=macOS' CODE_SIGNING_ALLOWED=NO build
          APP="build/Build/Products/Release/ChitarraTune.app"
          test -d "$APP"
          # Stamp Info.plist inside the built .app with tag and commit
          TAG_REF="${GITHUB_REF_NAME:-}"
          if [ -z "${TAG_REF}" ] && [ -n "${INPUT_VERSION:-}" ]; then TAG_REF="v${INPUT_VERSION}"; fi
          SHORT_VER="${TAG_REF#v}"
          SHA="$(git rev-parse --short HEAD)"
          PLIST="$APP/Contents/Info.plist"
          /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $SHORT_VER" "$PLIST" || /usr/libexec/PlistBuddy -c "Add :CFBundleShortVersionString string $SHORT_VER" "$PLIST"
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $SHA" "$PLIST" || /usr/libexec/PlistBuddy -c "Add :CFBundleVersion string $SHA" "$PLIST"
          echo "short_version=$SHORT_VER" >> $GITHUB_OUTPUT

      - name: Import signing certificate (Developer ID)
        if: env.MACOS_CERT_P12 != ''
        env:
          KEYCHAIN_PASS: ${{ secrets.KEYCHAIN_PASSWORD || 'actions' }}
        run: |
          set -euo pipefail
          echo "$MACOS_CERT_P12" | base64 --decode > developer_id.p12
          security create-keychain -p "$KEYCHAIN_PASS" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASS" build.keychain
          security import developer_id.p12 -k build.keychain -P "$MACOS_CERT_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security
          security list-keychains -d user -s build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASS" build.keychain

      - name: Codesign app (Hardened Runtime)
        if: env.MACOS_CERT_P12 != ''
        run: |
          set -euo pipefail
          APP="build/Build/Products/Release/ChitarraTune.app"
          IDENTITY="$CODESIGN_IDENTITY"
          if [ -z "$IDENTITY" ]; then
            IDENTITY=$(security find-identity -p codesigning -v build.keychain | awk -F '"' '/Developer ID Application/ {print $2; exit}')
          fi
          if [ -z "$IDENTITY" ]; then echo "No Developer ID Application identity found" >&2; exit 1; fi
          echo "Using identity: $IDENTITY"
          codesign --force --options runtime --timestamp \
                  --entitlements Apps/macOS/ChitarraTune.entitlements \
                  --sign "$IDENTITY" "$APP"
          codesign --verify --deep --strict --verbose=2 "$APP"

      - name: Notarize app (Apple notarytool)
        if: env.MACOS_CERT_P12 != '' && env.NOTARY_API_KEY_ID != '' && env.NOTARY_API_ISSUER_ID != '' && env.NOTARY_API_KEY_P8 != ''
        run: |
          set -euo pipefail
          APP="build/Build/Products/Release/ChitarraTune.app"
          echo "$NOTARY_API_KEY_P8" | base64 --decode > notary-api-key.p8
          xcrun notarytool submit "$APP" \
            --key notary-api-key.p8 \
            --key-id "$NOTARY_API_KEY_ID" \
            --issuer "$NOTARY_API_ISSUER_ID" \
            --wait --timeout 20m --output-format json | tee notary-result.json
          xcrun stapler staple -v "$APP"
          xcrun stapler validate -v "$APP"

      - name: Package zip (signed/notarized if available)
        id: pkg
        run: |
          set -euo pipefail
          APP="build/Build/Products/Release/ChitarraTune.app"
          SHORT_VER="${{ steps.build.outputs.short_version }}"
          ZIP_NAME="ChitarraTune-${SHORT_VER}-macOS.zip"
          ditto -c -k --sequesterRsrc --keepParent "$APP" "$ZIP_NAME"
          shasum -a 256 "$ZIP_NAME" > "$ZIP_NAME.sha256"
          echo "zip_name=$ZIP_NAME" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name != '' && github.ref_name || format('v{0}', inputs.version) }}
          tag_name: ${{ github.ref_name != '' && github.ref_name || format('v{0}', inputs.version) }}
          generate_release_notes: true
          prerelease: ${{ inputs.prerelease }}
          files: |
            ${{ steps.pkg.outputs.zip_name }}
            ${{ steps.pkg.outputs.zip_name }}.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
